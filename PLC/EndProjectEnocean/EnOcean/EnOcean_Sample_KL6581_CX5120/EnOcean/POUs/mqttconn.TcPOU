<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.17">
  <POU Name="mqttconn" Id="{b7775bad-e946-44ec-813d-353744a4647f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM mqttconn
VAR
    fbMqttClient    : FB_IotMqttClient;
	
    bSetParameter   : BOOL := TRUE;
    bConnect        : BOOL := TRUE;

	    (* published message *)
    sTopicPub   : STRING(255) := 'test'; //test/message (rabbitmq, pi)
    sPayloadPub : STRING(255);
    i : UDINT;
    fbTimer : TON := (PT:=T#1S);

    (* received message *)
    bSubscribed    : BOOL;
    sTopicSub      : STRING(255) := 'test';
    {attribute 'TcEncoding':='UTF-8'}
    sTopicRcv      : STRING(255);
    {attribute 'TcEncoding':='UTF-8'}
    sPayloadRcv    : STRING(255);
    fbMessageQueue : FB_IotMqttMessageQueue;
    fbMessage      : FB_IotMqttMessage;
	
	redge : r_trig;
	bexec : bool;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bSetParameter THEN
    bSetParameter               := FALSE;
    fbMqttClient.sHostName      := '192.168.1.175';
    fbMqttClient.nHostPort      := 1883;
//fbMqttClient.sClientId      := ''; 
    fbMqttClient.sTopicPrefix   := ''; 
    fbMqttClient.nKeepAlive     := 60; 
    //fbMqttClient.sUserName      := 'admin' ;
   // fbMqttClient.sUserPassword  := 'password'; 
//  fbMqttClient.stWill         := ; 
//  fbMqttClient.stTLS          := ;
    fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF
fbMqttClient.Execute(bConnect);

IF fbMqttClient.bConnected THEN
    IF NOT bSubscribed THEN
        bSubscribed := fbMqttClient.Subscribe(sTopic:=sTopicSub, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
    END_IF
    fbTimer(IN:=TRUE);
    IF fbTimer.Q THEN // publish new payload every second
        fbTimer(IN:=FALSE);
        i := i + 1;
        //sPayloadPub := CONCAT('test number is ', TO_STRING(i));
		sPayloadPub := Waardes.Allstrings;
        fbMqttClient.Publish(    sTopic:= sTopicPub, 
                                pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub))+1, 
                                eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE );
    END_IF
END_IF

IF fbMessageQueue.nQueuedMessages > 0 THEN
    IF fbMessageQueue.Dequeue(fbMessage:=fbMessage) THEN
        fbMessage.GetTopic(pTopic:=ADR(sTopicRcv), nTopicSize:=SIZEOF(sTopicRcv) );
        fbMessage.GetPayload(pPayload:=ADR(sPayloadRcv), nPayloadSize:=SIZEOF(sPayloadRcv), bSetNullTermination:=FALSE);
    END_IF
END_IF

redge(clk := bexec);

IF(redge.Q)THEN
	i := i + 1;
        sPayloadPub := CONCAT('test number is ', TO_STRING(i));
        fbMqttClient.Publish(    sTopic:= sTopicPub, 
                                pPayload:= ADR(sPayloadPub), nPayloadSize:= LEN2(ADR(sPayloadPub))+1, 
                                eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE );
	bexec := FALSE;
	
END_IF



]]></ST>
    </Implementation>
    <LineIds Name="mqttconn">
      <LineId Id="29" Count="5" />
      <LineId Id="133" Count="0" />
      <LineId Id="36" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="43" Count="8" />
      <LineId Id="186" Count="0" />
      <LineId Id="52" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="58" Count="5" />
      <LineId Id="57" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="106" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="101" Count="3" />
      <LineId Id="100" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="41" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>